{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\n\nconst startBtn = document.querySelector('button');\nconst showTime = document.querySelectorAll('.value');\nconst inputTime = document.querySelector(\"#datetime-picker\");\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n   const timeValid = userSelectedDate - new Date();\n    if (timeValid < 1) {\n      iziToast.error({ \n        position: 'topCenter',\n        message: `Please choose a date in the future`\n      });\n      startBtn.disabled = true; \n    } else {\n      startBtn.disabled = false;  \n      \n    }\n  },\n};\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n\n}\n\nstartBtn.disabled = true;\n\nflatpickr(\"#datetime-picker\", options);\n\n\n\nstartBtn.addEventListener('click', event => {\n  const intervalId = setInterval(() => {\n     \n    let timeInterval = userSelectedDate - new Date();\n  \n    if (timeInterval < 1) {\n\n      clearInterval(intervalId);\n      return;\n    }\n    startBtn.disabled = true;\n    inputTime.disabled = true;\n\n    const timer = convertMs(timeInterval);    \n\n    showTime[0].textContent = timer.days.toString().padStart(2, '0');\n    showTime[1].textContent= timer.hours.toString().padStart(2, '0');\n    showTime[2].textContent = timer.minutes.toString().padStart(2, '0');\n    showTime[3].textContent = timer.seconds.toString().padStart(2, '0');\n  }, 1000);\n  \n});"],"names":["userSelectedDate","startBtn","showTime","inputTime","options","selectedDates","iziToast","convertMs","ms","days","hours","minutes","seconds","flatpickr","event","intervalId","timeInterval","timer"],"mappings":"+IAMA,IAAIA,EAEJ,MAAMC,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAW,SAAS,iBAAiB,QAAQ,EAC7CC,EAAY,SAAS,cAAc,kBAAkB,EAErDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBL,EAAmBK,EAAc,CAAC,EACjBL,EAAmB,IAAI,KACxB,GACdM,EAAS,MAAM,CACb,SAAU,YACV,QAAS,oCACjB,CAAO,EACDL,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAGvB,CACH,EAGA,SAASM,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAExC,CAEAX,EAAS,SAAW,GAEpBY,EAAU,mBAAoBT,CAAO,EAIrCH,EAAS,iBAAiB,QAASa,GAAS,CAC1C,MAAMC,EAAa,YAAY,IAAM,CAEnC,IAAIC,EAAehB,EAAmB,IAAI,KAE1C,GAAIgB,EAAe,EAAG,CAEpB,cAAcD,CAAU,EACxB,MACD,CACDd,EAAS,SAAW,GACpBE,EAAU,SAAW,GAErB,MAAMc,EAAQV,EAAUS,CAAY,EAEpCd,EAAS,CAAC,EAAE,YAAce,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC/Df,EAAS,CAAC,EAAE,YAAae,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC/Df,EAAS,CAAC,EAAE,YAAce,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAClEf,EAAS,CAAC,EAAE,YAAce,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CACnE,EAAE,GAAI,CAET,CAAC"}